{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","signInWithPopup","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDelectClck","window","confirm","docptah","id","doc","delete","refFromURL","attachmentUrl","toggleEditing","update","src","width","height","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","refpath","uid","uuidv4","attachmentRef","ref","child","putString","response","getDownloadURL","createdAt","Date","now","createId","collection","add","maxLength","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","Home","nweets","setNweets","useEffect","onSnapshot","snapshot","nweetArray","docs","map","Navigation","to","displayName","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","getMyNweets","where","orderBy","get","updateProfile","signOut","push","AppRouter","isLoggedIn","exact","path","Profile","App","init","setInit","setIsLoggedIn","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80a2db89.chunk.js","sourcesContent":[" // Firebase App (the core Firebase SDK) is always required and must be listed first\r\nimport  firebase from \"firebase/app\"; \r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n  \r\n  // Your web app's Firebase configuration\r\n  const firebaseConfig = {\r\n    apiKey:process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STRAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n  };\r\n  // Initialize Firebase\r\n firebase.initializeApp(firebaseConfig);\r\n \r\n export const firebaseInstance = firebase;\r\n export const authService = firebase.auth();\r\n export const dbService = firebase.firestore();\r\n export const storageService = firebase.storage();","import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\n\r\nconst AuthForm = () => {\r\n    const [email,setEmail]=useState(\"\");\r\n    const [password,setPassword]=useState(\"\");\r\n    const [newAccount,setNewAccount]=useState(true);\r\n    const [error,setError]=useState(\"\");\r\n    \r\n    const onChange = (event) => {     \r\n        const {\r\n            target:{name,value},\r\n        }=event;    // event 중에서 target name value 를 사용한다\r\n        if(name=='email') {\r\n            setEmail(value);\r\n        }\r\n        else if(name=='password') {\r\n            setPassword(value);\r\n        }\r\n    }\r\n    const onSubmit = async(event) => {\r\n        event.preventDefault();\r\n        try{\r\n            let data;\r\n            if(newAccount) {\r\n                // create New Account\r\n                data= await authService.createUserWithEmailAndPassword(email,password)\r\n            } else {\r\n                // Log In\r\n                data= await authService.signInWithEmailAndPassword(email,password)\r\n            }\r\n            console.log(data);\r\n        } catch(error){\r\n                //console.log(error.message);\r\n                setError(error.message);\r\n        }\r\n \r\n    }\r\n    const toggleAccount = () =>setNewAccount((prev)=>!prev);\r\n\r\n    return <>\r\n    <form onSubmit={onSubmit}>\r\n    <input name=\"email\" \r\n    type=\"text\" placeholder=\"Email\" required \r\n    value={email}\r\n    onChange={onChange} />\r\n    <input name=\"password\" \r\n    type=\"password\" placeholder=\"Password\" required \r\n    value={password}\r\n    onChange={onChange} />\r\n    <input type=\"submit\" value={newAccount?\"Create Account\":\"Sign In\"} />\r\n    <p>{error}</p>\r\n    </form>\r\n    <span onClick={toggleAccount}>\r\n    {newAccount?\"Sign In\":\"Create Account\"}</span>\r\n    </>\r\n};\r\n\r\nexport default AuthForm;\r\n","import AuthForm from \"components/AuthForm\";\r\nimport { authService, firebaseInstance } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst Auth = () => {\r\n\r\n\r\n    const onSocialClick = async (event) => {  // google login\r\n        //event.target.name\r\n        const {target:{name},} = event; // 문법은 모두를 위한 ES6 참조\r\n        let provider;\r\n        if (name == \"google\") {\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n\r\n        }\r\n        else if(name == \"github\"){\r\n\r\n        }\r\n        await authService.signInWithPopup(provider);\r\n        //console.log(data);\r\n\r\n    };\r\n    return (\r\n    <div>\r\n        <AuthForm />\r\n        <div>\r\n            <button name=\"google\" onClick={onSocialClick}>Continue with Google</button>\r\n        </div>\r\n    </div>);\r\n};\r\nexport default Auth;\r\n","import { dbService, storageService } from 'fbase';\r\nimport React, { useState } from 'react';\r\n\r\nconst Nweet = ({nweetObj,isOwner}) =>{  // 소유자? yes => delete,edit\r\n    const [editing,setEditing] = useState(false);\r\n    const [newNweet,setNewNweet] = useState(nweetObj.text);\r\n    const onDelectClck = async () => {\r\n        const ok = window.confirm(\"Are you sure you want to delete this nweet?\");\r\n        //console.log(ok);\r\n        //console.log(nweetObj.id);\r\n        if(ok) {\r\n            var docptah = \"nweets/\" + nweetObj.id;  // path 로 접근하여 지운다\r\n            console.log(docptah);\r\n            await dbService.doc(docptah).delete();                              // firestore delete\r\n            await storageService.refFromURL(nweetObj.attachmentUrl).delete(); // storage delete\r\n            \r\n\r\n        }\r\n    }\r\n    const toggleEditing = () => setEditing((prev) => !prev);\r\n    const onSubmit = async (event) => {       // nweNweet 는 사용자가 입력한 text 를 가지고 있다.\r\n        event.preventDefault();\r\n        console.log(nweetObj,newNweet);\r\n        var docptah = \"nweets/\" + nweetObj.id;  // path 로 접근\r\n        await dbService.doc(docptah).update(\r\n            {text:newNweet}\r\n        );\r\n        setEditing(false); // editing mode 종료 ==> normal mode 로\r\n\r\n    };\r\n    const onChange = (event) => {\r\n        const {target:{value},} = event;\r\n        setNewNweet(value);\r\n    };\r\n    return(\r\n    <div>\r\n        {\r\n        editing?\r\n       // editing mode\r\n        <>\r\n        <form onSubmit={onSubmit}>  \r\n            <input \r\n            type=\"text\" placeholder=\"Edit your nweet\" required \r\n            value={newNweet} \r\n            onChange={onChange}\r\n            />\r\n            <input type=\"submit\" value=\"Update Nweet\" />\r\n        </form>        \r\n        <button onClick={toggleEditing}>Cancel</button>\r\n        </>\r\n        :\r\n        // Normal mode\r\n        <>                                                       \r\n         <h4>{nweetObj.text}</h4>\r\n        {nweetObj.attachmentUrl && <img src={nweetObj.attachmentUrl} width=\"50px\" height=\"50px\" />}                                 \r\n        {isOwner && (\r\n            <>\r\n            <button onClick={onDelectClck}>Delete Nweet</button>\r\n            <button onClick={toggleEditing}>Edit Nweet</button>\r\n            </>\r\n        )}\r\n        </>\r\n        }\r\n \r\n    </div>\r\n     );\r\n}; \r\n\r\nexport default Nweet;","import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// Home.js 의 return 의 form 을 가져 온다.\r\n// NweetFactory ==> nweets 생성을 담당\r\n\r\nconst NweetFactory = ({ userObj }) => {\r\n    const [nweet,setNweet] = useState(\"\");\r\n    const [attachment,setAttachment] = useState(\"\");  // 읽은 file String 저장\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        let attachmentUrl=\"\";       // for No photo\r\n        if(attachment != \"\") { // photo 가 있으면\r\n            // collection과 유사 가상의 path 만들어 주기\r\n            var refpath = userObj.uid+'/'+uuidv4();  // path 로 접근하여 \r\n            const attachmentRef = storageService\r\n                                    .ref().child(refpath);\r\n            const response = await attachmentRef.putString(attachment,\"data_url\"); // upload\r\n            attachmentUrl = await response.ref.getDownloadURL();  // URL 얻기\r\n        }\r\n        const nweetObj = {\r\n             text: nweet,\r\n             createdAt: Date.now(),\r\n             createId: userObj.uid,          // 누가 문서를 만들었는지..\r\n             attachmentUrl\r\n        };\r\n        await dbService.collection(\"nweets\").add(nweetObj);\r\n        setNweet(\"\");           // 지워주기\r\n        setAttachment(\"\");      // 지워주기\r\n\r\n        //console.log(fileRef);\r\n        // await dbService.collection(\"nweets\").add({      // db 에 추가 \r\n        //     text: nweet,\r\n        //     createdAt: Date.now(),\r\n        //     createId: userObj.uid,          // 누가 문서를 만들었는지..\r\n        // });\r\n        // setNweet(\"\");\r\n\r\n    };\r\n    const onChange = (event) => {\r\n        const { target: { value } } = event; // event 중에서 target 안에서 value 를 선택하여 value 변수 사용\r\n        setNweet(value);\r\n\r\n    };\r\n    //console.log(nweets);\r\n    const onFileChange = (event) => {\r\n        //console.log(event.target.files);    // FileList\r\n        const {\r\n            target:{files},\r\n        } = event ;  // es6\r\n        const theFile = files[0];   // get the file\r\n        const reader = new FileReader(); \r\n        reader.onloadend = (finishedEvent) => { // event listener 추가.. 파일 로딩이 끝날때 실행됨\r\n            //console.log(finishedEvent); // 아래의 read 한 결과 확인 가능\r\n            const {\r\n                currentTarget: {result},\r\n            } = finishedEvent;\r\n            setAttachment(result);\r\n        }\r\n        reader.readAsDataURL(theFile); //read the file\r\n\r\n    };\r\n    const onClearAttachment = () => setAttachment(null);\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n        <input value={nweet} onChange={onChange} \r\n        type=\"text\" placeholder=\"What's on your mind?\" maxLength={120} />\r\n        <input type=\"file\" accept=\"image/*\" onChange={onFileChange}/>\r\n        <input type=\"submit\" value=\"Nweet\" />\r\n        {attachment && (\r\n            <div>\r\n            <img src={attachment} width=\"50px\" height=\"50px\" />\r\n            <button onClick={onClearAttachment}>Clear</button>\r\n            </div>\r\n            )}\r\n        </form>\r\n    );\r\n};\r\nexport default NweetFactory;\r\n","import Nweet from \"components/Nweet\";\r\nimport NweetFactory from \"components/NweetFactory\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\nconst Home = ({userObj}) =>{\r\n    const [nweets,setNweets] = useState([]); // for get\r\n\r\n    // const getNweets = async () => {      // 1. foreach 를 이용한 방법\r\n    //     const dbNweets = await dbService.collection(\"nweets\").get();\r\n    //     dbNweets.forEach((document) => {\r\n    //         const nweetObject = {\r\n    //             ...document.data(),     // spread attribute 기능  data() 를 가져와 unpack\r\n    //             id:document.id,\r\n    //         };\r\n    //         setNweets((prev) => [nweetObject,...prev]); //// 문법은 모두를 위한 ES6 참조\r\n    //     } ); // enumerate data \r\n        \r\n   // };\r\n    useEffect(() => { // when mount db 에서 값을 가져오기\r\n        //getNweets();\r\n        // db 에 무엇인가 일어나면 --> listner -- 2. snapshot 을 이용한 방법\r\n        dbService.collection(\"nweets\").onSnapshot(snapshot => {\r\n            const nweetArray = snapshot.docs.map((doc) => ({\r\n                id:doc.id,...doc.data()}));\r\n            setNweets(nweetArray);\r\n        });\r\n    },[]);\r\n   \r\n    return(\r\n    <div>\r\n        <NweetFactory userObj={userObj} />  \r\n    <div>\r\n        {nweets.map((nweet) => (\r\n            <Nweet key={nweet.id} nweetObj={nweet} isOwner={nweet.createId==userObj.uid} />\r\n        )\r\n        )}\r\n    </div>\r\n    </div>\r\n\r\n    );\r\n};\r\nexport default Home;\r\n","import React from \"react\";\r\nimport {Link} from \"react-router-dom\"\r\n\r\nconst Navigation = ({userObj}) => <nav>\r\n    <ul>\r\n        <li>\r\n            <Link to=\"/\">Home</Link>\r\n        </li>\r\n        <li>\r\n            <Link to=\"/profile\">{userObj.displayName} My Profile</Link>\r\n        </li>\r\n    </ul>\r\n    </nav>;\r\n\r\nexport default Navigation;\r\n\r\n","import { authService, dbService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nexport default ({refreshUser,userObj}) => {\r\n    // hook 사용하여 \"/\" url 변경\r\n    const history = useHistory();\r\n    const [newDisplayName,setNewDisplayName] = useState(userObj.displayName);\r\n    const onLogOutClick = () => {\r\n        authService.signOut();\r\n        history.push(\"/\");  \r\n    };\r\n    const getMyNweets = async() => { // ID 가 나 => nweet 가져오기\r\n        const nweets = await dbService.collection(\"nweets\")     // firestore query 방법 예제\r\n        .where(\"createId\",\"==\", userObj.uid)\r\n        .orderBy(\"createdAt\",\"desc\")       // No sql 이므로 error ==> error 의 link 를 따라가 index 생성 요망\r\n        .get();\r\n        console.log(nweets.docs.map((doc)=>doc.data()));\r\n    };\r\n    useEffect(() => {\r\n        getMyNweets();\r\n    },[]\r\n    );\r\n    const onChange = (event) => {\r\n        const {\r\n            target:{value},\r\n        }=event;\r\n        setNewDisplayName(value);\r\n    };\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if(userObj.displayName != newDisplayName) {     // firebase. User profile update\r\n            await userObj.updateProfile({displayName:newDisplayName,});\r\n            refreshUser(); // App 에 있는 함수 firebase 의 user 로 web 의 user 를 update ==> refresh 위해 \r\n        }\r\n    };\r\n    return (\r\n        <>\r\n        <form onSubmit={onSubmit}>\r\n        <input \r\n            onChange={onChange}\r\n            value={newDisplayName}\r\n            type=\"text\" placeholder=\"\" />\r\n        <input type=\"submit\" value = \"Update Profile\" />\r\n        </form>\r\n        <button onClick ={onLogOutClick}>Log Out</button>\r\n        </>\r\n    );\r\n};","import React,{useState} from 'react';\r\nimport {HashRouter as Router,Redirect,Route,Switch} from \"react-router-dom\"\r\nimport Auth from '../routes/Auth';\r\nimport Home from '../routes/Home';\r\nimport Navigation from 'components/Navigation';\r\nimport Profile from 'routes/Profile';\r\n\r\n const AppRouter =({refreshUser,isLoggedIn, userObj})=>{\r\n    console.log({isLoggedIn});\r\n    return (\r\n        \r\n    <Router> \r\n        {/* user 의 이름을 Profile 자리에 표시 위해 */}\r\n        {isLoggedIn && <Navigation userObj={userObj} />} \r\n    <Switch>\r\n        {isLoggedIn?(\r\n        <>\r\n            <Route exact path=\"/\">\r\n                <Home userObj={userObj} />\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n                <Profile userObj={userObj} refreshUser={refreshUser} />\r\n            </Route>\r\n            {/* <Redirect from=\"*\" to=\"/\" /> */}\r\n        </>):(\r\n            <>\r\n            <Route exact path=\"/\">\r\n                <Auth />\r\n            </Route>\r\n            {/* <Redirect from=\"*\" to=\"/\" /> */}\r\n            </>\r\n            )}\r\n    </Switch>\r\n</Router>\r\n    );\r\n};\r\n\r\nexport default AppRouter;","// import logo from './logo.svg';\n// import './App.css';\nimport React, { useEffect, useState } from 'react';\n//import AppRouter from './Router';\nimport AppRouter from 'components/Router';\nimport {authService} from \"fbase\"\n\nfunction App() {\n  const [init,setInit] = useState(false);\n  const [isLoggedIn,setIsLoggedIn]=useState(false); // 초기에는 firebase 실행X --> loginX\n  const [userObj, setUserObj] = useState(null); // 누가 사용하는지 id 를 db 에 저장하기 위해 \n  \n  useEffect(()=>{ // 처음 시작할 때, component 가 mount 될때 실행\n    authService.onAuthStateChanged((user)=>{\n      if(user) { // currentUser 가 있으면 \n        setIsLoggedIn(true);\n        console.log(isLoggedIn);\n        //setUserObj(user);   // user id 의 저장을 위해 \n        setUserObj({    // 필요한 부분만 저장 why 너무 길어 지면 react 가 비교하지 못한다.\n          displayName:user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args), // function 을 저장하기 위해\n        });\n        console.log(user.displayName);\n      }\n      else {\n        setIsLoggedIn(false);\n        setUserObj(null);\n      }\n      setInit(true);\n      console.log(user);\n      \n    });\n  },[]);\n  const refreshUser = () => {   // 이 함수를 Router 로 넘겨 전체적으로 끌고 다닌다. refresh 을 위해\n    //setUserObj(authService.currentUser); // firebase user 와 web 의 user 를 일치시켜 refresh 할 수 있도록\n    const user = authService.currentUser;\n    setUserObj({    // 필요한 부분만 저장 why 너무 길어 지면 react 가 비교하지 못한다.\n      displayName:user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args), // function 을 저장하기 위해\n    });    \n  };\n  //console.log(userObj.displayName);\n  return (\n    \n    <>\n    {/* <AppRouter in isLoggedIn={isLoggedIn} /> */}\n    {init?<AppRouter \n        refreshUser = {refreshUser}\n        isLoggedIn={Boolean(userObj)}\n        userObj={userObj} \n        />:\"Initializing...\"}  \n    <footer>&copy;JANG {new Date().getFullYear()} Nwitter</footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './components/App';\n// import reportWebVitals from './reportWebVitals';\n//import firebase from \"./firebase\"; \n//console.log(firebase);\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}